// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fosshostorg/teardrop/ent/deployment"
	"github.com/fosshostorg/teardrop/ent/domain"
	"github.com/fosshostorg/teardrop/ent/project"
	"github.com/google/uuid"
)

// DomainCreate is the builder for creating a Domain entity.
type DomainCreate struct {
	config
	mutation *DomainMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDomain sets the "domain" field.
func (dc *DomainCreate) SetDomain(s string) *DomainCreate {
	dc.mutation.SetDomain(s)
	return dc
}

// SetCreateAt sets the "create_at" field.
func (dc *DomainCreate) SetCreateAt(t time.Time) *DomainCreate {
	dc.mutation.SetCreateAt(t)
	return dc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (dc *DomainCreate) SetNillableCreateAt(t *time.Time) *DomainCreate {
	if t != nil {
		dc.SetCreateAt(*t)
	}
	return dc
}

// SetUpdateAt sets the "update_at" field.
func (dc *DomainCreate) SetUpdateAt(t time.Time) *DomainCreate {
	dc.mutation.SetUpdateAt(t)
	return dc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (dc *DomainCreate) SetNillableUpdateAt(t *time.Time) *DomainCreate {
	if t != nil {
		dc.SetUpdateAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DomainCreate) SetID(u uuid.UUID) *DomainCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DomainCreate) SetNillableID(u *uuid.UUID) *DomainCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by ID.
func (dc *DomainCreate) SetDeploymentID(id uuid.UUID) *DomainCreate {
	dc.mutation.SetDeploymentID(id)
	return dc
}

// SetNillableDeploymentID sets the "deployment" edge to the Deployment entity by ID if the given value is not nil.
func (dc *DomainCreate) SetNillableDeploymentID(id *uuid.UUID) *DomainCreate {
	if id != nil {
		dc = dc.SetDeploymentID(*id)
	}
	return dc
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (dc *DomainCreate) SetDeployment(d *Deployment) *DomainCreate {
	return dc.SetDeploymentID(d.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (dc *DomainCreate) SetProjectID(id uuid.UUID) *DomainCreate {
	dc.mutation.SetProjectID(id)
	return dc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (dc *DomainCreate) SetNillableProjectID(id *uuid.UUID) *DomainCreate {
	if id != nil {
		dc = dc.SetProjectID(*id)
	}
	return dc
}

// SetProject sets the "project" edge to the Project entity.
func (dc *DomainCreate) SetProject(p *Project) *DomainCreate {
	return dc.SetProjectID(p.ID)
}

// Mutation returns the DomainMutation object of the builder.
func (dc *DomainCreate) Mutation() *DomainMutation {
	return dc.mutation
}

// Save creates the Domain in the database.
func (dc *DomainCreate) Save(ctx context.Context) (*Domain, error) {
	var (
		err  error
		node *Domain
	)
	dc.defaults()
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DomainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DomainCreate) SaveX(ctx context.Context) *Domain {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DomainCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DomainCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DomainCreate) defaults() {
	if _, ok := dc.mutation.CreateAt(); !ok {
		v := domain.DefaultCreateAt()
		dc.mutation.SetCreateAt(v)
	}
	if _, ok := dc.mutation.UpdateAt(); !ok {
		v := domain.DefaultUpdateAt()
		dc.mutation.SetUpdateAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := domain.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DomainCreate) check() error {
	if _, ok := dc.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "Domain.domain"`)}
	}
	if _, ok := dc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "Domain.create_at"`)}
	}
	if _, ok := dc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "Domain.update_at"`)}
	}
	return nil
}

func (dc *DomainCreate) sqlSave(ctx context.Context) (*Domain, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dc *DomainCreate) createSpec() (*Domain, *sqlgraph.CreateSpec) {
	var (
		_node = &Domain{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: domain.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: domain.FieldID,
			},
		}
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.Domain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: domain.FieldDomain,
		})
		_node.Domain = value
	}
	if value, ok := dc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: domain.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := dc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: domain.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if nodes := dc.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   domain.DeploymentTable,
			Columns: []string{domain.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deployment_domains = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   domain.ProjectTable,
			Columns: []string{domain.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_domains = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Domain.Create().
//		SetDomain(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DomainUpsert) {
//			SetDomain(v+v).
//		}).
//		Exec(ctx)
//
func (dc *DomainCreate) OnConflict(opts ...sql.ConflictOption) *DomainUpsertOne {
	dc.conflict = opts
	return &DomainUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dc *DomainCreate) OnConflictColumns(columns ...string) *DomainUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DomainUpsertOne{
		create: dc,
	}
}

type (
	// DomainUpsertOne is the builder for "upsert"-ing
	//  one Domain node.
	DomainUpsertOne struct {
		create *DomainCreate
	}

	// DomainUpsert is the "OnConflict" setter.
	DomainUpsert struct {
		*sql.UpdateSet
	}
)

// SetDomain sets the "domain" field.
func (u *DomainUpsert) SetDomain(v string) *DomainUpsert {
	u.Set(domain.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *DomainUpsert) UpdateDomain() *DomainUpsert {
	u.SetExcluded(domain.FieldDomain)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *DomainUpsert) SetCreateAt(v time.Time) *DomainUpsert {
	u.Set(domain.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DomainUpsert) UpdateCreateAt() *DomainUpsert {
	u.SetExcluded(domain.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *DomainUpsert) SetUpdateAt(v time.Time) *DomainUpsert {
	u.Set(domain.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *DomainUpsert) UpdateUpdateAt() *DomainUpsert {
	u.SetExcluded(domain.FieldUpdateAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(domain.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DomainUpsertOne) UpdateNewValues() *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(domain.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Domain.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DomainUpsertOne) Ignore() *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DomainUpsertOne) DoNothing() *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DomainCreate.OnConflict
// documentation for more info.
func (u *DomainUpsertOne) Update(set func(*DomainUpsert)) *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DomainUpsert{UpdateSet: update})
	}))
	return u
}

// SetDomain sets the "domain" field.
func (u *DomainUpsertOne) SetDomain(v string) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateDomain() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateDomain()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *DomainUpsertOne) SetCreateAt(v time.Time) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateCreateAt() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *DomainUpsertOne) SetUpdateAt(v time.Time) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateUpdateAt() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *DomainUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DomainCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DomainUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DomainUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DomainUpsertOne.ID is not supported by MySQL driver. Use DomainUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DomainUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DomainCreateBulk is the builder for creating many Domain entities in bulk.
type DomainCreateBulk struct {
	config
	builders []*DomainCreate
	conflict []sql.ConflictOption
}

// Save creates the Domain entities in the database.
func (dcb *DomainCreateBulk) Save(ctx context.Context) ([]*Domain, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Domain, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DomainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DomainCreateBulk) SaveX(ctx context.Context) []*Domain {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DomainCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DomainCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Domain.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DomainUpsert) {
//			SetDomain(v+v).
//		}).
//		Exec(ctx)
//
func (dcb *DomainCreateBulk) OnConflict(opts ...sql.ConflictOption) *DomainUpsertBulk {
	dcb.conflict = opts
	return &DomainUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dcb *DomainCreateBulk) OnConflictColumns(columns ...string) *DomainUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DomainUpsertBulk{
		create: dcb,
	}
}

// DomainUpsertBulk is the builder for "upsert"-ing
// a bulk of Domain nodes.
type DomainUpsertBulk struct {
	create *DomainCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(domain.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DomainUpsertBulk) UpdateNewValues() *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(domain.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DomainUpsertBulk) Ignore() *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DomainUpsertBulk) DoNothing() *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DomainCreateBulk.OnConflict
// documentation for more info.
func (u *DomainUpsertBulk) Update(set func(*DomainUpsert)) *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DomainUpsert{UpdateSet: update})
	}))
	return u
}

// SetDomain sets the "domain" field.
func (u *DomainUpsertBulk) SetDomain(v string) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateDomain() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateDomain()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *DomainUpsertBulk) SetCreateAt(v time.Time) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateCreateAt() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *DomainUpsertBulk) SetUpdateAt(v time.Time) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateUpdateAt() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *DomainUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DomainCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DomainCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DomainUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
