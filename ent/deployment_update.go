// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fosshostorg/teardrop/ent/deployment"
	"github.com/fosshostorg/teardrop/ent/domain"
	"github.com/fosshostorg/teardrop/ent/predicate"
	"github.com/fosshostorg/teardrop/ent/project"
)

// DeploymentUpdate is the builder for updating Deployment entities.
type DeploymentUpdate struct {
	config
	hooks    []Hook
	mutation *DeploymentMutation
}

// Where appends a list predicates to the DeploymentUpdate builder.
func (du *DeploymentUpdate) Where(ps ...predicate.Deployment) *DeploymentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetBranch sets the "branch" field.
func (du *DeploymentUpdate) SetBranch(s string) *DeploymentUpdate {
	du.mutation.SetBranch(s)
	return du
}

// SetAddress sets the "address" field.
func (du *DeploymentUpdate) SetAddress(s string) *DeploymentUpdate {
	du.mutation.SetAddress(s)
	return du
}

// SetCreateAt sets the "create_at" field.
func (du *DeploymentUpdate) SetCreateAt(t time.Time) *DeploymentUpdate {
	du.mutation.SetCreateAt(t)
	return du
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableCreateAt(t *time.Time) *DeploymentUpdate {
	if t != nil {
		du.SetCreateAt(*t)
	}
	return du
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (du *DeploymentUpdate) AddProjectIDs(ids ...int) *DeploymentUpdate {
	du.mutation.AddProjectIDs(ids...)
	return du
}

// AddProjects adds the "projects" edges to the Project entity.
func (du *DeploymentUpdate) AddProjects(p ...*Project) *DeploymentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.AddProjectIDs(ids...)
}

// AddDomainIDs adds the "domains" edge to the Domain entity by IDs.
func (du *DeploymentUpdate) AddDomainIDs(ids ...int) *DeploymentUpdate {
	du.mutation.AddDomainIDs(ids...)
	return du
}

// AddDomains adds the "domains" edges to the Domain entity.
func (du *DeploymentUpdate) AddDomains(d ...*Domain) *DeploymentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDomainIDs(ids...)
}

// Mutation returns the DeploymentMutation object of the builder.
func (du *DeploymentUpdate) Mutation() *DeploymentMutation {
	return du.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (du *DeploymentUpdate) ClearProjects() *DeploymentUpdate {
	du.mutation.ClearProjects()
	return du
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (du *DeploymentUpdate) RemoveProjectIDs(ids ...int) *DeploymentUpdate {
	du.mutation.RemoveProjectIDs(ids...)
	return du
}

// RemoveProjects removes "projects" edges to Project entities.
func (du *DeploymentUpdate) RemoveProjects(p ...*Project) *DeploymentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.RemoveProjectIDs(ids...)
}

// ClearDomains clears all "domains" edges to the Domain entity.
func (du *DeploymentUpdate) ClearDomains() *DeploymentUpdate {
	du.mutation.ClearDomains()
	return du
}

// RemoveDomainIDs removes the "domains" edge to Domain entities by IDs.
func (du *DeploymentUpdate) RemoveDomainIDs(ids ...int) *DeploymentUpdate {
	du.mutation.RemoveDomainIDs(ids...)
	return du
}

// RemoveDomains removes "domains" edges to Domain entities.
func (du *DeploymentUpdate) RemoveDomains(d ...*Domain) *DeploymentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDomainIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeploymentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeploymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeploymentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeploymentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeploymentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DeploymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deployment.Table,
			Columns: deployment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deployment.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Branch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldBranch,
		})
	}
	if value, ok := du.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldAddress,
		})
	}
	if value, ok := du.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldCreateAt,
		})
	}
	if du.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProjectsTable,
			Columns: []string{deployment.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !du.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProjectsTable,
			Columns: []string{deployment.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProjectsTable,
			Columns: []string{deployment.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DomainsTable,
			Columns: []string{deployment.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDomainsIDs(); len(nodes) > 0 && !du.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DomainsTable,
			Columns: []string{deployment.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DomainsTable,
			Columns: []string{deployment.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeploymentUpdateOne is the builder for updating a single Deployment entity.
type DeploymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeploymentMutation
}

// SetBranch sets the "branch" field.
func (duo *DeploymentUpdateOne) SetBranch(s string) *DeploymentUpdateOne {
	duo.mutation.SetBranch(s)
	return duo
}

// SetAddress sets the "address" field.
func (duo *DeploymentUpdateOne) SetAddress(s string) *DeploymentUpdateOne {
	duo.mutation.SetAddress(s)
	return duo
}

// SetCreateAt sets the "create_at" field.
func (duo *DeploymentUpdateOne) SetCreateAt(t time.Time) *DeploymentUpdateOne {
	duo.mutation.SetCreateAt(t)
	return duo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableCreateAt(t *time.Time) *DeploymentUpdateOne {
	if t != nil {
		duo.SetCreateAt(*t)
	}
	return duo
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (duo *DeploymentUpdateOne) AddProjectIDs(ids ...int) *DeploymentUpdateOne {
	duo.mutation.AddProjectIDs(ids...)
	return duo
}

// AddProjects adds the "projects" edges to the Project entity.
func (duo *DeploymentUpdateOne) AddProjects(p ...*Project) *DeploymentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.AddProjectIDs(ids...)
}

// AddDomainIDs adds the "domains" edge to the Domain entity by IDs.
func (duo *DeploymentUpdateOne) AddDomainIDs(ids ...int) *DeploymentUpdateOne {
	duo.mutation.AddDomainIDs(ids...)
	return duo
}

// AddDomains adds the "domains" edges to the Domain entity.
func (duo *DeploymentUpdateOne) AddDomains(d ...*Domain) *DeploymentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDomainIDs(ids...)
}

// Mutation returns the DeploymentMutation object of the builder.
func (duo *DeploymentUpdateOne) Mutation() *DeploymentMutation {
	return duo.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (duo *DeploymentUpdateOne) ClearProjects() *DeploymentUpdateOne {
	duo.mutation.ClearProjects()
	return duo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (duo *DeploymentUpdateOne) RemoveProjectIDs(ids ...int) *DeploymentUpdateOne {
	duo.mutation.RemoveProjectIDs(ids...)
	return duo
}

// RemoveProjects removes "projects" edges to Project entities.
func (duo *DeploymentUpdateOne) RemoveProjects(p ...*Project) *DeploymentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.RemoveProjectIDs(ids...)
}

// ClearDomains clears all "domains" edges to the Domain entity.
func (duo *DeploymentUpdateOne) ClearDomains() *DeploymentUpdateOne {
	duo.mutation.ClearDomains()
	return duo
}

// RemoveDomainIDs removes the "domains" edge to Domain entities by IDs.
func (duo *DeploymentUpdateOne) RemoveDomainIDs(ids ...int) *DeploymentUpdateOne {
	duo.mutation.RemoveDomainIDs(ids...)
	return duo
}

// RemoveDomains removes "domains" edges to Domain entities.
func (duo *DeploymentUpdateOne) RemoveDomains(d ...*Domain) *DeploymentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDomainIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeploymentUpdateOne) Select(field string, fields ...string) *DeploymentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Deployment entity.
func (duo *DeploymentUpdateOne) Save(ctx context.Context) (*Deployment, error) {
	var (
		err  error
		node *Deployment
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeploymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeploymentUpdateOne) SaveX(ctx context.Context) *Deployment {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeploymentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeploymentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DeploymentUpdateOne) sqlSave(ctx context.Context) (_node *Deployment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deployment.Table,
			Columns: deployment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deployment.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Deployment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deployment.FieldID)
		for _, f := range fields {
			if !deployment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deployment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Branch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldBranch,
		})
	}
	if value, ok := duo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldAddress,
		})
	}
	if value, ok := duo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldCreateAt,
		})
	}
	if duo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProjectsTable,
			Columns: []string{deployment.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !duo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProjectsTable,
			Columns: []string{deployment.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.ProjectsTable,
			Columns: []string{deployment.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DomainsTable,
			Columns: []string{deployment.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDomainsIDs(); len(nodes) > 0 && !duo.mutation.DomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DomainsTable,
			Columns: []string{deployment.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deployment.DomainsTable,
			Columns: []string{deployment.DomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Deployment{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
