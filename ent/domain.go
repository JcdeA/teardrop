// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fosshostorg/teardrop/ent/deployment"
	"github.com/fosshostorg/teardrop/ent/domain"
)

// Domain is the model entity for the Domain schema.
type Domain struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID int `json:"project_id,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DomainQuery when eager-loading is set.
	Edges              DomainEdges `json:"edges"`
	deployment_domains *string
}

// DomainEdges holds the relations/edges for other nodes in the graph.
type DomainEdges struct {
	// Deployment holds the value of the deployment edge.
	Deployment *Deployment `json:"deployment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DeploymentOrErr returns the Deployment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DomainEdges) DeploymentOrErr() (*Deployment, error) {
	if e.loadedTypes[0] {
		if e.Deployment == nil {
			// The edge deployment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deployment.Label}
		}
		return e.Deployment, nil
	}
	return nil, &NotLoadedError{edge: "deployment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Domain) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case domain.FieldID, domain.FieldProjectID:
			values[i] = new(sql.NullInt64)
		case domain.FieldDomain:
			values[i] = new(sql.NullString)
		case domain.FieldCreateAt, domain.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		case domain.ForeignKeys[0]: // deployment_domains
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Domain", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Domain fields.
func (d *Domain) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case domain.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case domain.FieldProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				d.ProjectID = int(value.Int64)
			}
		case domain.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				d.Domain = value.String
			}
		case domain.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				d.CreateAt = value.Time
			}
		case domain.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				d.UpdateAt = value.Time
			}
		case domain.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_domains", values[i])
			} else if value.Valid {
				d.deployment_domains = new(string)
				*d.deployment_domains = value.String
			}
		}
	}
	return nil
}

// QueryDeployment queries the "deployment" edge of the Domain entity.
func (d *Domain) QueryDeployment() *DeploymentQuery {
	return (&DomainClient{config: d.config}).QueryDeployment(d)
}

// Update returns a builder for updating this Domain.
// Note that you need to call Domain.Unwrap() before calling this method if this Domain
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Domain) Update() *DomainUpdateOne {
	return (&DomainClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Domain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Domain) Unwrap() *Domain {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Domain is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Domain) String() string {
	var builder strings.Builder
	builder.WriteString("Domain(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", project_id=")
	builder.WriteString(fmt.Sprintf("%v", d.ProjectID))
	builder.WriteString(", domain=")
	builder.WriteString(d.Domain)
	builder.WriteString(", create_at=")
	builder.WriteString(d.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(d.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Domains is a parsable slice of Domain.
type Domains []*Domain

func (d Domains) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
