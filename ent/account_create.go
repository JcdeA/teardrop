// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fosshostorg/teardrop/ent/account"
	"github.com/fosshostorg/teardrop/ent/user"
	"github.com/google/uuid"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAccessToken sets the "access_token" field.
func (ac *AccountCreate) SetAccessToken(s string) *AccountCreate {
	ac.mutation.SetAccessToken(s)
	return ac
}

// SetRefreshToken sets the "refresh_token" field.
func (ac *AccountCreate) SetRefreshToken(s string) *AccountCreate {
	ac.mutation.SetRefreshToken(s)
	return ac
}

// SetTokenType sets the "token_type" field.
func (ac *AccountCreate) SetTokenType(s string) *AccountCreate {
	ac.mutation.SetTokenType(s)
	return ac
}

// SetExpiresAt sets the "expires_at" field.
func (ac *AccountCreate) SetExpiresAt(t time.Time) *AccountCreate {
	ac.mutation.SetExpiresAt(t)
	return ac
}

// SetProviderAccountId sets the "providerAccountId" field.
func (ac *AccountCreate) SetProviderAccountId(s string) *AccountCreate {
	ac.mutation.SetProviderAccountId(s)
	return ac
}

// SetScope sets the "scope" field.
func (ac *AccountCreate) SetScope(s string) *AccountCreate {
	ac.mutation.SetScope(s)
	return ac
}

// SetProvider sets the "provider" field.
func (ac *AccountCreate) SetProvider(s string) *AccountCreate {
	ac.mutation.SetProvider(s)
	return ac
}

// SetID sets the "id" field.
func (ac *AccountCreate) SetID(u uuid.UUID) *AccountCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AccountCreate) SetNillableID(u *uuid.UUID) *AccountCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ac *AccountCreate) SetUserID(id uuid.UUID) *AccountCreate {
	ac.mutation.SetUserID(id)
	return ac
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ac *AccountCreate) SetNillableUserID(id *uuid.UUID) *AccountCreate {
	if id != nil {
		ac = ac.SetUserID(*id)
	}
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *AccountCreate) SetUser(u *User) *AccountCreate {
	return ac.SetUserID(u.ID)
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccountCreate) defaults() {
	if _, ok := ac.mutation.ID(); !ok {
		v := account.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "Account.access_token"`)}
	}
	if _, ok := ac.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`ent: missing required field "Account.refresh_token"`)}
	}
	if _, ok := ac.mutation.TokenType(); !ok {
		return &ValidationError{Name: "token_type", err: errors.New(`ent: missing required field "Account.token_type"`)}
	}
	if _, ok := ac.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Account.expires_at"`)}
	}
	if _, ok := ac.mutation.ProviderAccountId(); !ok {
		return &ValidationError{Name: "providerAccountId", err: errors.New(`ent: missing required field "Account.providerAccountId"`)}
	}
	if _, ok := ac.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "Account.scope"`)}
	}
	if _, ok := ac.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "Account.provider"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: account.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.AccessToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldAccessToken,
		})
		_node.AccessToken = value
	}
	if value, ok := ac.mutation.RefreshToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldRefreshToken,
		})
		_node.RefreshToken = value
	}
	if value, ok := ac.mutation.TokenType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldTokenType,
		})
		_node.TokenType = value
	}
	if value, ok := ac.mutation.ExpiresAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldExpiresAt,
		})
		_node.ExpiresAt = value
	}
	if value, ok := ac.mutation.ProviderAccountId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldProviderAccountId,
		})
		_node.ProviderAccountId = value
	}
	if value, ok := ac.mutation.Scope(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldScope,
		})
		_node.Scope = value
	}
	if value, ok := ac.mutation.Provider(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldProvider,
		})
		_node.Provider = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   account.UserTable,
			Columns: []string{account.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_accounts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.Create().
//		SetAccessToken(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetAccessToken(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AccountCreate) OnConflict(opts ...sql.ConflictOption) *AccountUpsertOne {
	ac.conflict = opts
	return &AccountUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AccountCreate) OnConflictColumns(columns ...string) *AccountUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertOne{
		create: ac,
	}
}

type (
	// AccountUpsertOne is the builder for "upsert"-ing
	//  one Account node.
	AccountUpsertOne struct {
		create *AccountCreate
	}

	// AccountUpsert is the "OnConflict" setter.
	AccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetAccessToken sets the "access_token" field.
func (u *AccountUpsert) SetAccessToken(v string) *AccountUpsert {
	u.Set(account.FieldAccessToken, v)
	return u
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *AccountUpsert) UpdateAccessToken() *AccountUpsert {
	u.SetExcluded(account.FieldAccessToken)
	return u
}

// SetRefreshToken sets the "refresh_token" field.
func (u *AccountUpsert) SetRefreshToken(v string) *AccountUpsert {
	u.Set(account.FieldRefreshToken, v)
	return u
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *AccountUpsert) UpdateRefreshToken() *AccountUpsert {
	u.SetExcluded(account.FieldRefreshToken)
	return u
}

// SetTokenType sets the "token_type" field.
func (u *AccountUpsert) SetTokenType(v string) *AccountUpsert {
	u.Set(account.FieldTokenType, v)
	return u
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *AccountUpsert) UpdateTokenType() *AccountUpsert {
	u.SetExcluded(account.FieldTokenType)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *AccountUpsert) SetExpiresAt(v time.Time) *AccountUpsert {
	u.Set(account.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *AccountUpsert) UpdateExpiresAt() *AccountUpsert {
	u.SetExcluded(account.FieldExpiresAt)
	return u
}

// SetProviderAccountId sets the "providerAccountId" field.
func (u *AccountUpsert) SetProviderAccountId(v string) *AccountUpsert {
	u.Set(account.FieldProviderAccountId, v)
	return u
}

// UpdateProviderAccountId sets the "providerAccountId" field to the value that was provided on create.
func (u *AccountUpsert) UpdateProviderAccountId() *AccountUpsert {
	u.SetExcluded(account.FieldProviderAccountId)
	return u
}

// SetScope sets the "scope" field.
func (u *AccountUpsert) SetScope(v string) *AccountUpsert {
	u.Set(account.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *AccountUpsert) UpdateScope() *AccountUpsert {
	u.SetExcluded(account.FieldScope)
	return u
}

// SetProvider sets the "provider" field.
func (u *AccountUpsert) SetProvider(v string) *AccountUpsert {
	u.Set(account.FieldProvider, v)
	return u
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *AccountUpsert) UpdateProvider() *AccountUpsert {
	u.SetExcluded(account.FieldProvider)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(account.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AccountUpsertOne) UpdateNewValues() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(account.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Account.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AccountUpsertOne) Ignore() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertOne) DoNothing() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreate.OnConflict
// documentation for more info.
func (u *AccountUpsertOne) Update(set func(*AccountUpsert)) *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetAccessToken sets the "access_token" field.
func (u *AccountUpsertOne) SetAccessToken(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateAccessToken() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *AccountUpsertOne) SetRefreshToken(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateRefreshToken() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateRefreshToken()
	})
}

// SetTokenType sets the "token_type" field.
func (u *AccountUpsertOne) SetTokenType(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateTokenType() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateTokenType()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *AccountUpsertOne) SetExpiresAt(v time.Time) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateExpiresAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetProviderAccountId sets the "providerAccountId" field.
func (u *AccountUpsertOne) SetProviderAccountId(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetProviderAccountId(v)
	})
}

// UpdateProviderAccountId sets the "providerAccountId" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateProviderAccountId() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateProviderAccountId()
	})
}

// SetScope sets the "scope" field.
func (u *AccountUpsertOne) SetScope(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateScope() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateScope()
	})
}

// SetProvider sets the "provider" field.
func (u *AccountUpsertOne) SetProvider(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateProvider() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateProvider()
	})
}

// Exec executes the query.
func (u *AccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AccountUpsertOne.ID is not supported by MySQL driver. Use AccountUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	builders []*AccountCreate
	conflict []sql.ConflictOption
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetAccessToken(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountUpsertBulk {
	acb.conflict = opts
	return &AccountUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AccountCreateBulk) OnConflictColumns(columns ...string) *AccountUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertBulk{
		create: acb,
	}
}

// AccountUpsertBulk is the builder for "upsert"-ing
// a bulk of Account nodes.
type AccountUpsertBulk struct {
	create *AccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(account.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AccountUpsertBulk) UpdateNewValues() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(account.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AccountUpsertBulk) Ignore() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertBulk) DoNothing() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreateBulk.OnConflict
// documentation for more info.
func (u *AccountUpsertBulk) Update(set func(*AccountUpsert)) *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetAccessToken sets the "access_token" field.
func (u *AccountUpsertBulk) SetAccessToken(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateAccessToken() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *AccountUpsertBulk) SetRefreshToken(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateRefreshToken() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateRefreshToken()
	})
}

// SetTokenType sets the "token_type" field.
func (u *AccountUpsertBulk) SetTokenType(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateTokenType() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateTokenType()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *AccountUpsertBulk) SetExpiresAt(v time.Time) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateExpiresAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetProviderAccountId sets the "providerAccountId" field.
func (u *AccountUpsertBulk) SetProviderAccountId(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetProviderAccountId(v)
	})
}

// UpdateProviderAccountId sets the "providerAccountId" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateProviderAccountId() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateProviderAccountId()
	})
}

// SetScope sets the "scope" field.
func (u *AccountUpsertBulk) SetScope(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateScope() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateScope()
	})
}

// SetProvider sets the "provider" field.
func (u *AccountUpsertBulk) SetProvider(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateProvider() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateProvider()
	})
}

// Exec executes the query.
func (u *AccountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
