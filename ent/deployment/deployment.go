// Code generated by entc, DO NOT EDIT.

package deployment

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the deployment type in the database.
	Label = "deployment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBranch holds the string denoting the branch field in the database.
	FieldBranch = "branch"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeDomains holds the string denoting the domains edge name in mutations.
	EdgeDomains = "domains"
	// Table holds the table name of the deployment in the database.
	Table = "deployments"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "deployments"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_deployments"
	// DomainsTable is the table that holds the domains relation/edge.
	DomainsTable = "domains"
	// DomainsInverseTable is the table name for the Domain entity.
	// It exists in this package in order to avoid circular dependency with the "domain" package.
	DomainsInverseTable = "domains"
	// DomainsColumn is the table column denoting the domains relation/edge.
	DomainsColumn = "deployment_domains"
)

// Columns holds all SQL columns for deployment fields.
var Columns = []string{
	FieldID,
	FieldBranch,
	FieldAddress,
	FieldCreateAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "deployments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_deployments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
