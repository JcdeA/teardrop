// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fosshostorg/teardrop/ent/deployment"
	"github.com/fosshostorg/teardrop/ent/project"
	"github.com/google/uuid"
)

// Deployment is the model entity for the Deployment schema.
type Deployment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Branch holds the value of the "branch" field.
	Branch string `json:"branch,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeploymentQuery when eager-loading is set.
	Edges               DeploymentEdges `json:"edges"`
	project_deployments *uuid.UUID
}

// DeploymentEdges holds the relations/edges for other nodes in the graph.
type DeploymentEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Domains holds the value of the domains edge.
	Domains []*Domain `json:"domains,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// DomainsOrErr returns the Domains value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentEdges) DomainsOrErr() ([]*Domain, error) {
	if e.loadedTypes[1] {
		return e.Domains, nil
	}
	return nil, &NotLoadedError{edge: "domains"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deployment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deployment.FieldBranch, deployment.FieldAddress:
			values[i] = new(sql.NullString)
		case deployment.FieldCreateAt:
			values[i] = new(sql.NullTime)
		case deployment.FieldID:
			values[i] = new(uuid.UUID)
		case deployment.ForeignKeys[0]: // project_deployments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Deployment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deployment fields.
func (d *Deployment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deployment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case deployment.FieldBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch", values[i])
			} else if value.Valid {
				d.Branch = value.String
			}
		case deployment.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				d.Address = value.String
			}
		case deployment.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				d.CreateAt = value.Time
			}
		case deployment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_deployments", values[i])
			} else if value.Valid {
				d.project_deployments = new(uuid.UUID)
				*d.project_deployments = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the Deployment entity.
func (d *Deployment) QueryProject() *ProjectQuery {
	return (&DeploymentClient{config: d.config}).QueryProject(d)
}

// QueryDomains queries the "domains" edge of the Deployment entity.
func (d *Deployment) QueryDomains() *DomainQuery {
	return (&DeploymentClient{config: d.config}).QueryDomains(d)
}

// Update returns a builder for updating this Deployment.
// Note that you need to call Deployment.Unwrap() before calling this method if this Deployment
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deployment) Update() *DeploymentUpdateOne {
	return (&DeploymentClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Deployment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deployment) Unwrap() *Deployment {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deployment is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deployment) String() string {
	var builder strings.Builder
	builder.WriteString("Deployment(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", branch=")
	builder.WriteString(d.Branch)
	builder.WriteString(", address=")
	builder.WriteString(d.Address)
	builder.WriteString(", create_at=")
	builder.WriteString(d.CreateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Deployments is a parsable slice of Deployment.
type Deployments []*Deployment

func (d Deployments) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
