// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fosshostorg/teardrop/ent/deployment"
	"github.com/fosshostorg/teardrop/ent/domain"
	"github.com/fosshostorg/teardrop/ent/predicate"
	"github.com/fosshostorg/teardrop/ent/project"
	"github.com/google/uuid"
)

// DomainUpdate is the builder for updating Domain entities.
type DomainUpdate struct {
	config
	hooks    []Hook
	mutation *DomainMutation
}

// Where appends a list predicates to the DomainUpdate builder.
func (du *DomainUpdate) Where(ps ...predicate.Domain) *DomainUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDomain sets the "domain" field.
func (du *DomainUpdate) SetDomain(s string) *DomainUpdate {
	du.mutation.SetDomain(s)
	return du
}

// SetCreateAt sets the "create_at" field.
func (du *DomainUpdate) SetCreateAt(t time.Time) *DomainUpdate {
	du.mutation.SetCreateAt(t)
	return du
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (du *DomainUpdate) SetNillableCreateAt(t *time.Time) *DomainUpdate {
	if t != nil {
		du.SetCreateAt(*t)
	}
	return du
}

// SetUpdateAt sets the "update_at" field.
func (du *DomainUpdate) SetUpdateAt(t time.Time) *DomainUpdate {
	du.mutation.SetUpdateAt(t)
	return du
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by ID.
func (du *DomainUpdate) SetDeploymentID(id uuid.UUID) *DomainUpdate {
	du.mutation.SetDeploymentID(id)
	return du
}

// SetNillableDeploymentID sets the "deployment" edge to the Deployment entity by ID if the given value is not nil.
func (du *DomainUpdate) SetNillableDeploymentID(id *uuid.UUID) *DomainUpdate {
	if id != nil {
		du = du.SetDeploymentID(*id)
	}
	return du
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (du *DomainUpdate) SetDeployment(d *Deployment) *DomainUpdate {
	return du.SetDeploymentID(d.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (du *DomainUpdate) SetProjectID(id uuid.UUID) *DomainUpdate {
	du.mutation.SetProjectID(id)
	return du
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (du *DomainUpdate) SetNillableProjectID(id *uuid.UUID) *DomainUpdate {
	if id != nil {
		du = du.SetProjectID(*id)
	}
	return du
}

// SetProject sets the "project" edge to the Project entity.
func (du *DomainUpdate) SetProject(p *Project) *DomainUpdate {
	return du.SetProjectID(p.ID)
}

// Mutation returns the DomainMutation object of the builder.
func (du *DomainUpdate) Mutation() *DomainMutation {
	return du.mutation
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (du *DomainUpdate) ClearDeployment() *DomainUpdate {
	du.mutation.ClearDeployment()
	return du
}

// ClearProject clears the "project" edge to the Project entity.
func (du *DomainUpdate) ClearProject() *DomainUpdate {
	du.mutation.ClearProject()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DomainUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	du.defaults()
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DomainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DomainUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DomainUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DomainUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DomainUpdate) defaults() {
	if _, ok := du.mutation.UpdateAt(); !ok {
		v := domain.UpdateDefaultUpdateAt()
		du.mutation.SetUpdateAt(v)
	}
}

func (du *DomainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   domain.Table,
			Columns: domain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: domain.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Domain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: domain.FieldDomain,
		})
	}
	if value, ok := du.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: domain.FieldCreateAt,
		})
	}
	if value, ok := du.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: domain.FieldUpdateAt,
		})
	}
	if du.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   domain.DeploymentTable,
			Columns: []string{domain.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   domain.DeploymentTable,
			Columns: []string{domain.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   domain.ProjectTable,
			Columns: []string{domain.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   domain.ProjectTable,
			Columns: []string{domain.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DomainUpdateOne is the builder for updating a single Domain entity.
type DomainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DomainMutation
}

// SetDomain sets the "domain" field.
func (duo *DomainUpdateOne) SetDomain(s string) *DomainUpdateOne {
	duo.mutation.SetDomain(s)
	return duo
}

// SetCreateAt sets the "create_at" field.
func (duo *DomainUpdateOne) SetCreateAt(t time.Time) *DomainUpdateOne {
	duo.mutation.SetCreateAt(t)
	return duo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableCreateAt(t *time.Time) *DomainUpdateOne {
	if t != nil {
		duo.SetCreateAt(*t)
	}
	return duo
}

// SetUpdateAt sets the "update_at" field.
func (duo *DomainUpdateOne) SetUpdateAt(t time.Time) *DomainUpdateOne {
	duo.mutation.SetUpdateAt(t)
	return duo
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by ID.
func (duo *DomainUpdateOne) SetDeploymentID(id uuid.UUID) *DomainUpdateOne {
	duo.mutation.SetDeploymentID(id)
	return duo
}

// SetNillableDeploymentID sets the "deployment" edge to the Deployment entity by ID if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableDeploymentID(id *uuid.UUID) *DomainUpdateOne {
	if id != nil {
		duo = duo.SetDeploymentID(*id)
	}
	return duo
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (duo *DomainUpdateOne) SetDeployment(d *Deployment) *DomainUpdateOne {
	return duo.SetDeploymentID(d.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (duo *DomainUpdateOne) SetProjectID(id uuid.UUID) *DomainUpdateOne {
	duo.mutation.SetProjectID(id)
	return duo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableProjectID(id *uuid.UUID) *DomainUpdateOne {
	if id != nil {
		duo = duo.SetProjectID(*id)
	}
	return duo
}

// SetProject sets the "project" edge to the Project entity.
func (duo *DomainUpdateOne) SetProject(p *Project) *DomainUpdateOne {
	return duo.SetProjectID(p.ID)
}

// Mutation returns the DomainMutation object of the builder.
func (duo *DomainUpdateOne) Mutation() *DomainMutation {
	return duo.mutation
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (duo *DomainUpdateOne) ClearDeployment() *DomainUpdateOne {
	duo.mutation.ClearDeployment()
	return duo
}

// ClearProject clears the "project" edge to the Project entity.
func (duo *DomainUpdateOne) ClearProject() *DomainUpdateOne {
	duo.mutation.ClearProject()
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DomainUpdateOne) Select(field string, fields ...string) *DomainUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Domain entity.
func (duo *DomainUpdateOne) Save(ctx context.Context) (*Domain, error) {
	var (
		err  error
		node *Domain
	)
	duo.defaults()
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DomainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DomainUpdateOne) SaveX(ctx context.Context) *Domain {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DomainUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DomainUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DomainUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdateAt(); !ok {
		v := domain.UpdateDefaultUpdateAt()
		duo.mutation.SetUpdateAt(v)
	}
}

func (duo *DomainUpdateOne) sqlSave(ctx context.Context) (_node *Domain, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   domain.Table,
			Columns: domain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: domain.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Domain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, domain.FieldID)
		for _, f := range fields {
			if !domain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != domain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Domain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: domain.FieldDomain,
		})
	}
	if value, ok := duo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: domain.FieldCreateAt,
		})
	}
	if value, ok := duo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: domain.FieldUpdateAt,
		})
	}
	if duo.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   domain.DeploymentTable,
			Columns: []string{domain.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   domain.DeploymentTable,
			Columns: []string{domain.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   domain.ProjectTable,
			Columns: []string{domain.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   domain.ProjectTable,
			Columns: []string{domain.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Domain{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
